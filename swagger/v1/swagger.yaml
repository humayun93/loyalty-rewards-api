openapi: 3.0.1
info:
  title: Loyalty Rewards API
  description: API for managing user loyalty rewards
  version: 'v1'
  contact:
    email: support@example.com
servers:
  - url: '{protocol}://{subdomain}.example.com/api/v1'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      subdomain:
        default: client1
        description: Client subdomain for multi-tenant access
paths:
  /users:
    get:
      summary: List all users
      description: Returns a list of all users for the current client
      operationId: listUsers
      tags:
        - users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Create a new user
      description: Creates a new user for the current client
      operationId: createUser
      tags:
        - users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /users/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        description: Unique identifier for the user within the client
        schema:
          type: string
    get:
      summary: Get a specific user
      description: Returns a specific user by user_id
      operationId: getUser
      tags:
        - users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: The requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a user
      description: Updates a user's information
      operationId: updateUser
      tags:
        - users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      summary: Delete a user
      description: Deletes a specific user by user_id
      operationId: deleteUser
      tags:
        - users
      security:
        - BearerAuth: []
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /ping:
    get:
      summary: API health check
      description: Returns a simple response to confirm the API is running
      operationId: ping
      tags:
        - system
      responses:
        '200':
          description: API is operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "pong"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          description: Internal database ID
        user_id:
          type: string
          description: Unique identifier for the user within the client
        birth_date:
          type: string
          format: date
          nullable: true
          description: User's birth date
        joining_date:
          type: string
          format: date
          nullable: true
          description: Date when the user joined
        points:
          type: integer
          description: User's loyalty points
          default: 0
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - user_id
    UserInput:
      type: object
      properties:
        user_id:
          type: string
          description: Unique identifier for the user within the client
        birth_date:
          type: string
          format: date
          nullable: true
          description: User's birth date
        joining_date:
          type: string
          format: date
          nullable: true
          description: Date when the user joined
      required:
        - user_id
    Error:
      type: object
      properties:
        error:
          type: string
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
  responses:
    BadRequest:
      description: Invalid request format
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: Validation errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' 