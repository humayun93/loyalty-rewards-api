{
  "openapi": "3.0.1",
  "info": {
    "title": "Loyalty Rewards API",
    "description": "API for managing user loyalty rewards",
    "version": "v1",
    "contact": {
      "email": "support@example.com"
    }
  },
  "servers": [
    {
      "url": "{protocol}://{subdomain}.example.com/api/v1",
      "variables": {
        "protocol": {
          "enum": [
            "http",
            "https"
          ],
          "default": "https"
        },
        "subdomain": {
          "default": "client1",
          "description": "Client subdomain for multi-tenant access"
        }
      }
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "summary": "List all users",
        "description": "Returns a list of all users for the current client",
        "operationId": "listUsers",
        "tags": [
          "users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Creates a new user for the current client",
        "operationId": "createUser",
        "tags": [
          "users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity - Invalid data provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Birth date must be a valid date"
                    },
                    "errors": {
                      "type": "object",
                      "description": "Field-level validation errors",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "can't be blank",
                          "is invalid"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "description": "Unique identifier for the user within the client",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get a specific user",
        "description": "Returns a specific user by user_id",
        "operationId": "getUser",
        "tags": [
          "users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "summary": "Update a user",
        "description": "Updates a user's information",
        "operationId": "updateUser",
        "tags": [
          "users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "description": "Unprocessable Entity - Invalid data provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Birth date must be a valid date"
                    },
                    "errors": {
                      "type": "object",
                      "description": "Field-level validation errors",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "can't be blank",
                          "is invalid"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "description": "Deletes a specific user by user_id",
        "operationId": "deleteUser",
        "tags": [
          "users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/users/{user_id}/transactions": {
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "description": "Unique identifier for the user within the client",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Create a new transaction",
        "description": "Creates a new transaction for the specified user",
        "operationId": "createTransaction",
        "tags": [
          "transactions"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/users/{user_id}/points": {
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "description": "Unique identifier for the user within the client",
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Get user points information",
        "description": "Returns information about a user's points including current, monthly, and yearly totals",
        "operationId": "getUserPoints",
        "tags": [
          "points"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The user's points information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPoints"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/users/{user_id}/rewards": {
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "required": true,
          "description": "Unique identifier for the user within the client",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "status",
          "in": "query",
          "required": false,
          "description": "Filter rewards by status (active, redeemed, all)",
          "schema": {
            "type": "string",
            "enum": [
              "active",
              "redeemed",
              "all"
            ],
            "default": "active"
          }
        }
      ],
      "get": {
        "summary": "Get user rewards",
        "description": "Returns a list of rewards for the specified user, filtered by status if provided",
        "operationId": "getUserRewards",
        "tags": [
          "rewards"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The user's rewards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRewards"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/ping": {
      "get": {
        "summary": "API health check",
        "description": "Returns a simple response to confirm the API is running",
        "operationId": "ping",
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "description": "API is operational",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "pong"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Internal database ID"
          },
          "user_id": {
            "type": "string",
            "description": "Unique identifier for the user within the client"
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "User's birth date"
          },
          "joining_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date when the user joined"
          },
          "points": {
            "type": "integer",
            "description": "User's loyalty points",
            "default": 0
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "user_id"
        ]
      },
      "UserInput": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "Unique identifier for the user within the client"
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "User's birth date (must be a valid date in YYYY-MM-DD format)"
          },
          "joining_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date when the user joined (must be a valid date in YYYY-MM-DD format)"
          }
        },
        "required": [
          "user_id"
        ]
      },
      "TransactionInput": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Transaction amount (precision: 10, scale: 2)"
          },
          "currency": {
            "type": "string",
            "description": "Currency code (e.g., USD, EUR)"
          },
          "foreign": {
            "type": "boolean",
            "description": "Whether this is a foreign transaction",
            "default": false
          }
        },
        "required": [
          "amount",
          "currency"
        ]
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Internal database ID"
          },
          "user_id": {
            "type": "string",
            "description": "The user ID associated with this transaction"
          },
          "amount": {
            "type": "string",
            "description": "Transaction amount (precision: 10, scale: 2)"
          },
          "currency": {
            "type": "string",
            "description": "Currency code"
          },
          "foreign": {
            "type": "boolean",
            "description": "Whether this is a foreign transaction"
          },
          "points_earned": {
            "type": "number",
            "format": "float",
            "description": "Points earned from this transaction (precision: 10, scale: 3)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "amount",
          "currency"
        ]
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "points_earned": {
            "type": "number",
            "format": "float",
            "description": "Points earned from this transaction (precision: 10, scale: 3)"
          },
          "user_total_points": {
            "type": "number",
            "format": "float",
            "description": "User's total points after this transaction (precision: 10, scale: 3)"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "UserPoints": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "The user ID"
          },
          "current_points": {
            "type": "number",
            "format": "float",
            "description": "Current total points balance (precision: 10, scale: 3)"
          },
          "monthly_points": {
            "type": "object",
            "description": "Points earned by month",
            "additionalProperties": {
              "type": "number",
              "format": "float"
            }
          },
          "yearly_points": {
            "type": "object",
            "description": "Points earned by year",
            "additionalProperties": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "required": [
          "user_id",
          "current_points",
          "monthly_points",
          "yearly_points"
        ]
      },
      "Reward": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "description": "Internal database ID"
          },
          "reward_type": {
            "type": "string",
            "description": "Type of reward (e.g., free_coffee, movie_tickets)"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "redeemed",
              "expired"
            ],
            "description": "Current status of the reward"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "reward_type",
          "status"
        ]
      },
      "UserRewards": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "The user ID"
          },
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reward"
            }
          }
        },
        "required": [
          "user_id",
          "rewards"
        ]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request - Invalid input",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Invalid request parameters"
                }
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized - API token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Access denied"
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found - The requested resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "User not found"
                }
              }
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "Unprocessable Entity - Invalid data provided",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Birth date must be a valid date"
                },
                "errors": {
                  "type": "object",
                  "description": "Field-level validation errors",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "can't be blank",
                      "is invalid"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}